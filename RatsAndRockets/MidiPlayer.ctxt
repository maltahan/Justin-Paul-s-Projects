#BlueJ class context
comment0.params=
comment0.target=MidiPlayer()
comment0.text=\r\n\ Create\ a\ new\ MidiPlayer\ object\ with\ a\ default\r\n\ instrument\ specified\ by\ DEFAULT_INSTRUMENT\ -\ \r\n\ usually\ a\ piano\ sound.\r\n
comment1.params=instrument
comment1.target=MidiPlayer(int)
comment1.text=\r\n\ Create\ a\ new\ MidiPlayer\ object\ with\ a\ specified\r\n\ instrument.\r\n\ @param\ instrument\ the\ instrument\ to\ use\r\n
comment10.params=
comment10.target=void\ turnAllOff()
comment10.text=\r\n\ Release\ all\ notes\ smoothly.\ This\ can\ be\ called\ in\ the\ World.stopped()\r\n\ method\ to\ ensure\ no\ notes\ are\ playing\ when\ the\ scenario\ has\ been\ \r\n\ stopped\ or\ reset.\r\n
comment11.params=
comment11.target=javax.sound.midi.MidiChannel\ getMidiChannel()
comment11.text=\r\n\ Get\ the\ MidiChannel\ object\ that\ this\ MidiPlayer\ class\ is\ using.\r\n\ If\ you\ want\ to\ do\ some\ more\ advanced\ work\ with\ the\ midi\ channel,\ you\r\n\ can\ use\ this\ method\ to\ get\ the\ MidiChannel\ object\ and\ then\ work\ with\r\n\ it\ directly.\ The\ API\ for\ the\ MidiChannel\ class\ is\ available\ online\r\n\ as\ part\ of\ the\ javax.sound.midi\ package.<br>\r\n\ Examples\ of\ why\ you\ might\ want\ to\ use\ this\ -\ adjusting\ the\ speed\r\n\ notes\ are\ played\ /\ released\ with,\ adding\ sustain,\ adding\ pitch\r\n\ bend,\ soloing\ /\ muting\ individual\ channels\ -\ all\ are\ fairly\ advanced\r\n\ features\ and\ as\ such\ are\ not\ included\ in\ this\ class\ as\ standard\ (to\r\n\ keep\ things\ simple\ and\ avoid\ clutter.)\r\n\ @return\ the\ MidiChannel\ object\ behind\ this\ MidiPlayer.\r\n
comment12.params=fileName
comment12.target=void\ playMidiFile(java.lang.String)
comment12.text=\r\n\ Play\ a\ Midi\ file.\r\n
comment13.params=
comment13.target=void\ stopMidiFile()
comment13.text=\r\n\ Stop\ playing\ a\ Midi\ file.\r\n
comment14.params=instrument
comment14.target=javax.sound.midi.MidiChannel\ getChannel(int)
comment14.text=\r\n\ Internal\ method\ to\ get\ the\ channel\ from\ the\ synthesizer\ in\ use.\r\n\ @param\ instrument\ the\ instrument\ to\ load\ initially.\r\n
comment2.params=instrument
comment2.target=void\ setInstrument(int)
comment2.text=\r\n\ Change\ the\ instrument\ this\ MidiPlayer\ uses.\r\n\ @param\ instrument\ the\ instrument\ to\ change\ to\r\n
comment3.params=
comment3.target=int\ getInstrument()
comment3.text=\r\n\ Get\ the\ instrument\ the\ MidiPlayer\ is\ using\r\n\ at\ present.\r\n\ @return\ the\ instrument\ in\ use.\r\n
comment4.params=key
comment4.target=int\ getNumber(java.lang.String)
comment4.text=\r\n\ Converts\ a\ string\ description\ of\ the\ key\r\n\ to\ the\ number\ used\ by\ the\ MidiPlayer.\ \r\n\ @throws\ RuntimeException\ if\ the\ key\ name\ is\ invalid.\r\n
comment5.params=note
comment5.target=int\ getOffset(java.lang.String)
comment5.text=\r\n\ Set\ how\ far\ each\ note\ is\ (relatively\ in\ semitones)\ above\ C.\r\n
comment6.params=note
comment6.target=void\ play(int)
comment6.text=\r\n\ Play\ a\ note\ -\ this\ method\ doesn't\ turn\ the\ note\r\n\ off\ after\ a\ specified\ period\ of\ time,\ the\ release\r\n\ method\ must\ be\ called\ to\ do\ that.\r\n\ @param\ note\ the\ note\ to\ play\r\n
comment7.params=note
comment7.target=void\ release(int)
comment7.text=\r\n\ Release\ a\ note\ that\ was\ previously\ played.\ If\ this\r\n\ note\ isn't\ on\ already,\ this\ method\ will\ do\ nothing.\r\n
comment8.params=note\ length
comment8.target=void\ play(int,\ int)
comment8.text=\r\n\ Play\ a\ note\ for\ a\ certain\ amount\ of\ time.\r\n\ @param\ note\ the\ integer\ value\ for\ the\ note\ to\ play\r\n\ @param\ length\ the\ length\ to\ play\ the\ note\ (ms).\r\n
comment9.params=
comment9.target=void\ run()
numComments=15
